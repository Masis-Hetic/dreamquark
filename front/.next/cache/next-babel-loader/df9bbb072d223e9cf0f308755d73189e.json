{"ast":null,"code":"var _jsxFileName = \"/Users/masis/Documents/dreamquark/dreamquark/front/pages/organizations.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport fetch from \"isomorphic-unfetch\";\nimport MainComponent from \"../components/main-component/main-component\";\nimport ListView from \"../components/global-list-view-styles\";\nimport Link from \"next/link\";\n\nconst Organizations = ({\n  orgas,\n  asPath\n}) => {\n  return __jsx(MainComponent, {\n    asPath: asPath,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, __jsx(ListView.H1, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, \"List of organizations\"), __jsx(ListView.Ul, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, orgas.map((orga, i) => __jsx(ListView.Li, {\n    key: i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, __jsx(Link, {\n    href: {\n      pathname: `/organization/[organization]`,\n      query: {\n        id: orga.id\n      }\n    },\n    as: `/organization/${orga.id}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, __jsx(ListView.A, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, orga.name))))));\n};\n\nOrganizations.getInitialProps = async ({\n  asPath\n}) => {\n  const orgas = await fetch('http://localhost:8080/api/organizations');\n  return {\n    orgas: await orgas.json(),\n    asPath\n  };\n};\n\nexport default Organizations;","map":{"version":3,"sources":["/Users/masis/Documents/dreamquark/dreamquark/front/pages/organizations.js"],"names":["React","fetch","MainComponent","ListView","Link","Organizations","orgas","asPath","map","orga","i","pathname","query","id","name","getInitialProps","json"],"mappings":";;AAAA,OAAOA,KAAP,MAA0B,OAA1B;AACA,OAAOC,KAAP,MAA0B,oBAA1B;AACA,OAAOC,aAAP,MAA0B,6CAA1B;AACA,OAAOC,QAAP,MAA0B,uCAA1B;AACA,OAAOC,IAAP,MAA0B,WAA1B;;AAEA,MAAMC,aAAa,GAAG,CAAE;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAF,KAAyB;AAC7C,SACE,MAAC,aAAD;AAAe,IAAA,MAAM,EAAGA,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD,CAAU,EAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADF,EAGE,MAAC,QAAD,CAAU,EAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACID,KAAK,CAACE,GAAN,CAAU,CAACC,IAAD,EAAOC,CAAP,KACV,MAAC,QAAD,CAAU,EAAV;AAAa,IAAA,GAAG,EAAEA,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,IAAI,EAAE;AAAEC,MAAAA,QAAQ,EAAG,8BAAb;AAA4CC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,EAAE,EAAEJ,IAAI,CAACI;AAAX;AAAnD,KAAZ;AAAkF,IAAA,EAAE,EAAI,iBAAiBJ,IAAI,CAACI,EAAI,EAAlH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD,CAAU,CAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAaJ,IAAI,CAACK,IAAlB,CADF,CADF,CADA,CADJ,CAHF,CADF;AAgBD,CAjBD;;AAmBAT,aAAa,CAACU,eAAd,GAAgC,OAAQ;AAAER,EAAAA;AAAF,CAAR,KAAwB;AACtD,QAAMD,KAAK,GAAG,MAAML,KAAK,CAAE,yCAAF,CAAzB;AACA,SAAO;AAAEK,IAAAA,KAAK,EAAE,MAAMA,KAAK,CAACU,IAAN,EAAf;AAA6BT,IAAAA;AAA7B,GAAP;AACD,CAHD;;AAKA,eAAeF,aAAf","sourcesContent":["import React         from \"react\";\nimport fetch         from \"isomorphic-unfetch\";\nimport MainComponent from \"../components/main-component/main-component\";\nimport ListView      from \"../components/global-list-view-styles\";\nimport Link          from \"next/link\";\n\nconst Organizations = ( { orgas, asPath } ) => {\n  return (\n    <MainComponent asPath={ asPath }>\n      <ListView.H1>List of organizations</ListView.H1>\n\n      <ListView.Ul>\n        { orgas.map((orga, i) =>\n          <ListView.Li key={i}>\n            <Link href={{ pathname: `/organization/[organization]`, query: { id: orga.id } }} as={ `/organization/${ orga.id }` }>\n              <ListView.A>{orga.name}</ListView.A>\n            </Link>\n          </ListView.Li>\n        ) }\n      </ListView.Ul>\n      \n    </MainComponent>\n  )\n};\n\nOrganizations.getInitialProps = async ( { asPath } ) => {\n  const orgas = await fetch( 'http://localhost:8080/api/organizations' );\n  return { orgas: await orgas.json(), asPath }\n};\n\nexport default Organizations;\n"]},"metadata":{},"sourceType":"module"}